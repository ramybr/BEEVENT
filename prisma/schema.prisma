datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Event {
  id Int @id @default(autoincrement())
  name String @db.Text
  description String? @db.Text

  userId String 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)


  
   
  type Type? 

  location String? @db.Text

  
  status EventStatus @default(upcoming)

  isOpen Boolean @default(true)
  isMandatory Boolean @default(false)

  participations Participation[]

  sessions Session[]

  imageUrl String? @db.Text

}

enum Type {
  workshop
  training
  other
}

enum EventStatus {
  upcoming
  finished
  inProgress
  cancelled
}

model Participation {
  @@id([userId, eventId])
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId Int
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

}

model User {
  id    String  @id 
  firstName  String
  lastName String
  email String  @unique

  userRole String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participations Participation[]

  attendances Attendance[]

  events Event[]

}

enum userRole {
  ADMIN
  USER
}

model Attendance {
 
  @@id([userId, sessionId])
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  sessionId Int
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  isPresent Boolean

}

model Session {
  id Int @id @default(autoincrement())
  
  eventId Int
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  attendaces Attendance[]

  date DateTime
  imageUrl String? @db.Text
  description String? @db.Text

  status SessionStatus
}

enum SessionStatus {
  upcoming
  finished
  inProgress
  cancelled
}

 
