datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Event {
  id Int @id @default(autoincrement())
  name String @db.Text
  description String? @db.Text

  userId Int 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventTypeId Int?
  eventType EventType? @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)


  location String? @db.Text

  
  status EventStatus @default(UPCOMING)

  isOpen Boolean @default(true)
  isMandatory Boolean @default(false)
  isPublished Boolean @default(false)

  startDate String?
  endDate String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  participations Participation[]

  sessions Session[]

  imageUrl String? @db.Text

}

model EventType {
  id Int @id @default(autoincrement())
  name String @unique
  events Event[]
}


enum EventStatus {
  UPCOMING
  FINICHED
  IN_PROGRESS
  CANCELLED
}

model Participation {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId Int
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

}

model User {
  id    Int  @id @default(autoincrement())
  clerkId String @unique 

  firstName  String
  lastName String
  email String?  

  role String?

  organization_id Int? 
  organization Organization? @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participations Participation[]

  attendances Attendance[]

  eventsCreated Event[]

}

enum userRole {
  ADMIN
  USER
}

model Attendance {
 
  @@id([userId, sessionId])
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)


  sessionId Int
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  isPresent Boolean

}

model Session {
  id Int @id @default(autoincrement())
  
  title String
  eventId Int
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  attendaces Attendance[]

  sessionStart String? 
  sessionEnd String? 

  imageUrl String? @db.Text
  description String? @db.Text

  position Int 

  createdAt DateTime @default(now())

  status SessionStatus @default(UPCOMING)
}

enum SessionStatus {
  UPCOMING
  FINICHED
  IN_PROGRESS
  CANCELLED
}

model Organization {
  id Int @id @default(autoincrement())
  name String
  activitySector ActivitySector

  employees User[]
}

enum ActivitySector {
  TECHNOLOGY
  ENERGY
  FINANCE
  HEALTH_CARE
  TELECOMMUNICATIONS
  MOTOR_VEHICULES
  FOOD_BEVERAGE
  TRANSPORTATIONS
  ENGINEERING_CONSTRUCTION
  MEDIA
  OTHER
}



 
